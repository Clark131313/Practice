#include <iostream>
#include <stdexcept>
#include <vector>

using namespace std;

class Tower {
public:
    // конструктор и метод SetDisks нужны, чтобы правильно создать башни
    Tower(int disks_num) {
        FillTower(disks_num);
    }

    int GetDisksNum() const {
        return disks_.size();
    }

    void SetDisks(int disks_num) {
        FillTower(disks_num);
    }

    // добавляем диск на верх собственной башни
    // обратите внимание на исключение, которое выбрасывается этим методом
    void AddToTop(int disk) {
        int top_disk_num = disks_.size() - 1;
        if (0 != disks_.size() && disk >= disks_[top_disk_num]) {
            throw invalid_argument("Невозможно поместить большой диск на маленький");
        } else {
            // допишите этот метод и используйте его в вашем решении
            disks_.push_back(disk);
        }
    }

    // вы можете дописывать необходимые для вашего решения методы
    
    int GetTopDisk() const {
        if (!disks_.empty()) {
            return disks_.back();
        } else {
            throw out_of_range("Башня пуста");
        }
    }

    // удаляет верхний диск с башни
    void RemoveTop() {
        if (!disks_.empty()) {
            disks_.pop_back();
        } else {
            throw out_of_range("Башня пуста");
        }
    }

private:
    vector<int> disks_;

    // используем приватный метод FillTower, чтобы избежать дубликации кода
    void FillTower(int disks_num) {
        for (int i = disks_num; i > 0; i--) {
            disks_.push_back(i);
        }
    }
};

/*void SolveHanoi(vector<Tower>& towers) {
    int disks_num = towers[0].GetDisksNum();

    // допишите функцию, чтобы на towers[0] было 0 дисков,
    // на towers[1] 0 дисков,
    // и на towers[2] было disks_num дисков
}
*/

 // disks_num - количество перемещаемых дисков
 // destination - конечная башня для перемещения
 // buffer - башня, которую нужно использовать в качестве буфера для дисков
/* void MoveDisks(int disks_num, Tower& destination, Tower& buffer) {
     
     if (disk_num !=0 // условие выхода ещё не выполнено ) {
         // действия из шага рекурсии
         
     }
 }*/
         
    void MoveDisks(int disks_num, Tower& destination, Tower& buffer) {
    if (disks_num == 0) {
        // Базовый случай: если нет дисков для перемещения, завершаем рекурсию.
        return;
    } else {
        // Рекурсивный случай: перемещаем диски с помощью башни-буфера.
        vector <int> source;
        for (int i = disks_num; i>0; --i){
            source.push_back(i);
        }
        // Шаг 1: перемещаем (disk_num - 1) дисков с начальной башни на башню-буфер,
        // используя целевую башню как буфер.
        MoveDisks(disks_num - 1, buffer, destination);

        // Шаг 2: перемещаем самый большой диск с начальной башни на целевую башню.
        int disk_to_move = source.GetTopDisk();
        destination.AddToTop(disk_to_move);
        source.RemoveTop();

        // Шаг 3: перемещаем (disk_num - 1) дисков с башни-буфера на целевую башню,
        // используя начальную башню как буфер.
        MoveDisks(disks_num - 1, buffer, destination);
    }
       // return *this;
}     
         
         
         
 
 //vector<Tower>
 void SolveHanoi(vector<Tower>& towers) {
     int disks_num = towers[0].GetDisksNum();
   
     // запускаем рекурсию
     // просим переложить все диски на последнюю башню
     // с использованием средней башни как буфера
     towers[0].MoveDisks(disks_num, towers[2], towers[1]);
   // return *this;
 }
 


int main() {
    int towers_num = 3;
    int disks_num = 3;
    vector<Tower> towers;
    // Добавим в вектор три пустые башни.
    for (int i = 0; i < towers_num; ++i) {
        towers.push_back(0);
    }
    // Добавим на первую башню три кольца.
    towers[0].SetDisks(disks_num);

    SolveHanoi(towers);
    
}
