#include <algorithm>
#include <cmath>
#include <map>
#include <set>
#include <string>
#include <utility>
#include <vector>

using namespace std;

/* Подставьте вашу реализацию класса SearchServer сюда */

struct Document {
    int id;
    double relevance;
    int rating;
};

enum class DocumentStatus {
    ACTUAL,
    IRRELEVANT,
    BANNED,
    REMOVED,
};

class SearchServer {
public:
    void SetStopWords(const string& text) {
        for (const string& word : SplitIntoWords(text)) {
            stop_words_.insert(word);
        }
    }

    void AddDocument(int document_id, const string& document, DocumentStatus status,
                     const vector<int>& ratings) {
        const vector<string> words = SplitIntoWordsNoStop(document);
        const double inv_word_count = 1.0 / words.size();
        for (const string& word : words) {
            word_to_document_freqs_[word][document_id] += inv_word_count;
        }
        documents_.emplace(document_id, DocumentData{ComputeAverageRating(ratings), status});
    }

 
    vector<Document> FindTopDocuments(const string& raw_query, DocumentStatus status = DocumentStatus::ACTUAL)const{
        return FindTopDocuments(raw_query,
                            [status](int id, DocumentStatus status1, double rating)
                            {return status==status1;});
        
    }
   
    
    template <typename Predicat>
    vector<Document> FindTopDocuments(const string& raw_query, Predicat predicat) const {
        const Query query = ParseQuery(raw_query);
        auto matched_documents = FindAllDocuments(query, predicat);

        sort(matched_documents.begin(), matched_documents.end(),
             [](const Document& lhs, const Document& rhs) {
                 if (abs(lhs.relevance - rhs.relevance) < 1e-6) {
                     return lhs.rating > rhs.rating;
                 } else {
                     return lhs.relevance > rhs.relevance;
                 }
             });
        if (matched_documents.size() > MAX_RESULT_DOCUMENT_COUNT) {
            matched_documents.resize(MAX_RESULT_DOCUMENT_COUNT);
        }
        return matched_documents;
    }

    int GetDocumentCount() const {
        return documents_.size();
    }

    tuple<vector<string>, DocumentStatus> MatchDocument(const string& raw_query,
                                                        int document_id) const {
        const Query query = ParseQuery(raw_query);
        vector<string> matched_words;
        for (const string& word : query.plus_words) {
            if (word_to_document_freqs_.count(word) == 0) {
                continue;
            }
            if (word_to_document_freqs_.at(word).count(document_id)) {
                matched_words.push_back(word);
            }
        }
        for (const string& word : query.minus_words) {
            if (word_to_document_freqs_.count(word) == 0) {
                continue;
            }
            if (word_to_document_freqs_.at(word).count(document_id)) {
                matched_words.clear();
                break;
            }
        }
        return {matched_words, documents_.at(document_id).status};
    }

private:
    struct DocumentData {
        int rating;
        DocumentStatus status;
    };

    set<string> stop_words_;
    map<string, map<int, double>> word_to_document_freqs_;
    map<int, DocumentData> documents_;

    bool IsStopWord(const string& word) const {
        return stop_words_.count(word) > 0;
    }

    vector<string> SplitIntoWordsNoStop(const string& text) const {
        vector<string> words;
        for (const string& word : SplitIntoWords(text)) {
            if (!IsStopWord(word)) {
                words.push_back(word);
            }
        }
        return words;
    }

    static int ComputeAverageRating(const vector<int>& ratings) {
        if (ratings.empty()) {
            return 0;
        }
        int rating_sum = 0;
        for (const int rating : ratings) {
            rating_sum += rating;
        }
        return rating_sum / static_cast<int>(ratings.size());
    }

    struct QueryWord {
        string data;
        bool is_minus;
        bool is_stop;
    };

    QueryWord ParseQueryWord(string text) const {
        bool is_minus = false;
        // Word shouldn't be empty
        if (text[0] == '-') {
            is_minus = true;
            text = text.substr(1);
        }
        return {text, is_minus, IsStopWord(text)};
    }

    struct Query {
        set<string> plus_words;
        set<string> minus_words;
    };

    Query ParseQuery(const string& text) const {
        Query query;
        for (const string& word : SplitIntoWords(text)) {
            const QueryWord query_word = ParseQueryWord(word);
            if (!query_word.is_stop) {
                if (query_word.is_minus) {
                    query.minus_words.insert(query_word.data);
                } else {
                    query.plus_words.insert(query_word.data);
                }
            }
        }
        return query;
    }

    // Existence required
    double ComputeWordInverseDocumentFreq(const string& word) const {
        return log(GetDocumentCount() * 1.0 / word_to_document_freqs_.at(word).size());
    }

   
    
    template <typename Predicat>
    vector<Document> FindAllDocuments(const Query& query, Predicat predicat) const {
        map<int, double> document_to_relevance;
        for (const string& word : query.plus_words) {
            if (word_to_document_freqs_.count(word) == 0) {
                continue;
            }
            const double inverse_document_freq = ComputeWordInverseDocumentFreq(word);
            for (const auto &[document_id, term_freq] : word_to_document_freqs_.at(word)) {
                if (predicat(document_id,documents_.at(document_id).status, documents_.at(document_id).rating)) {
                    document_to_relevance[document_id] += term_freq * inverse_document_freq;
                }
            }
        }

        for (const string& word : query.minus_words) {
            if (word_to_document_freqs_.count(word) == 0) {
                continue;
            }
            for (const auto &[document_id, _] : word_to_document_freqs_.at(word)) {
                document_to_relevance.erase(document_id);
            }
        }

        vector<Document> matched_documents;
        for (const auto &[document_id, relevance] : document_to_relevance) {
            matched_documents.push_back(
                {document_id, relevance, documents_.at(document_id).rating});
        }
        return matched_documents;
    }
};



/*
   Подставьте сюда вашу реализацию макросов
   ASSERT, ASSERT_EQUAL, ASSERT_EQUAL_HINT, ASSERT_HINT и RUN_TEST
*/

// -------- Начало модульных тестов поисковой системы ----------

  void AddDocument(int document_id, const string& document, DocumentStatus status,
                     const vector<int>& ratings)
 

// Тест проверяет, что поисковая система исключает стоп-слова при добавлении документов
void TestExcludeStopWordsFromAddedDocumentContent() {
    const int doc_id = 42;
    const string content = "cat in the city"s;
    const vector<int> ratings = {1, 2, 3};
    {
        SearchServer server;
        server.AddDocument(doc_id, content, DocumentStatus::ACTUAL, ratings);
        const auto found_docs = server.FindTopDocuments("in"s);
        ASSERT_EQUAL(found_docs.size(), 1u);
        const Document& doc0 = found_docs[0];
        ASSERT_EQUAL(doc0.id, doc_id);
    }

    {
        SearchServer server;
        server.SetStopWords("in the"s);
        server.AddDocument(doc_id, content, DocumentStatus::ACTUAL, ratings);
        ASSERT_HINT(server.FindTopDocuments("in"s).empty(),
                    "Stop words must be excluded from documents"s);
    }
}



/*
Разместите код остальных тестов здесь
*/
// Тест проверяет, что документ ДОБАВЛЕН, посредсвом его пересечения с поисковым запросом


 void TestAddingDocumentUseAddDocument(){
     const int doc_id = 50;
     const string content = "little pony in the our house"s;
     const vector <int> ratings = {1, 2, 3, 4, 5, 6};
     
    {
         SearchServer server;
         server.AddDocument(doc_id, content, DocumentStatus::ACTUAL, ratings);
         const auto found_docs = server.FindTopDocuments("pony"s);
         ASSERT_EQUAL(found_docs.size(),1u);
         const auto Document& doc0 = found_docs[0];
         ASSERT_EQUAL_HINT (doc0,doc_id,"The numbers of the added and found documents do not match"s);
    }
     
    {
       SearchServer server;
       server.AddDocument(doc_id, content, DocumentStatus::ACTUAL, ratings); 
       const auto found_docs = server.FindTopDocuments("cat"s);
       ASSERT_EQUAL_HINT(found_docs.size(),0u, "The word  \"cat\" was not to be found in the search document doc_id = 50"s);
    }
 
 }

//Тест проверяет чтобы документы, содержащие МИНУС-СЛОВА из поискового запроса, не включались в результаты поиска
void TestExcludeMinusWordsFromResultSearch(){
    
    const int doc_id = 51;
    const string content = "happy new year sun"s;
    const vector <int> ratings = {1, 2, 3, 4};
    
    {
       SearchServer server;
       server.AddDocument(doc_id, content, DocumentStatus::ACTUAL, ratings);
       const auto found_docs = server.FindTopDocuments("-year sun"s);
       ASSERT_HINT(found_docs.size(), 1u, "Minus words should be excluded from the search query"s);
    
    }
     
    {
      SearchServer server;
      server.AddDocument(doc_id, content, DocumentStatus::ACTUAL, ratings);
      const auto found_docs = server.FindTopDocuments("-sun"s);
      ASSERT_EQUAL_HINT(found_docs.size(),0u, "Minus words should be excluded from the search query"s);
    }
    
} 


// Тест проверяет все ли ПЛЮС-СЛОВА из запроса, присутствующие в документе, возвращены в результатах

//Соответствие документов поисковому запросу. При этом должны быть возвращены все слова из поискового запроса, присутствующие в //документе. Если есть соответствие хотя бы по одному минус-слову, должен возвращаться пустой список слов.

 void TestOnReturnPlusWordsSearchResults(){
     
     const int doc_id = 52;
     const string content = "what a wonderful day"s;
     const vector <int> ratings = {1, 2, 3, 4};
     
     { // Вариант с наличием совпадающих слов
        SearchServer server;
        server.AddDocument(doc_id, content, DocumentStatus::ACTUAL, ratings);
        const auto found_docs = server.MatchDocument("what day"s, doc_id);
        const vector <string> found_words = get<0>(found_docs);
        const vector <string> result_must_be = {"what"s, "day"s};
         sort(found_words.begin(), found_words.end());
         sort(result_must_be.begin(), result_must_be.end())
        ASSERT(found_words == result_must, "Wrong search plus words"s);
     } 
     
     {  // Вариант с присутствием минус слова 
        SearchServer server;
        server.AddDocument(doc_id, content, DocumentStatus::ACTUAL, ratings);
        const auto found_docs = server.FindTopDocuments("day -what"s);
        ASSERT_HINT(!found_docs.empty(), "Vector<Document> must be empty"s);
     }
 }

// Сортировка найденных документов по релевантности. Возвращаемые при поиске документов результаты должны быть отсортированы в порядке убывания релевантности.

void TestSortRelevanceFromMaxToMin(){
    const int doc_id = 53;
    const int doc_id1 = 54;
    const string content = "found little white cat"s;
    const string content1 = "found cat"s;
    const vector <int> ratings = {1, 2, 3, 4};
    
    
    {
        SearchServer server;
        server.AddDocument(doc_id, content, DocumentStatus::ACTUAL, ratings);
        server.AddDocument(doc_id1, content1, DocumentStatus::ACTUAL, ratings);
        const auto found_docs = server.FindTopDocuments("little white cat"s);
        ASSERT_HINT(found_docs.at(0).relevance > found_docs.at(1).relevance, "Result of search must be sort from max relevance to min"s)
    }
    
    {
        SearchServer server;
        server.AddDocument(doc_id, content, DocumentStatus::ACTUAL, ratings);
        server.AddDocument(doc_id1, content1, DocumentStatus::ACTUAL, ratings);
        const auto found_docs = server.FindTopDocuments("cat"s);
        ASSERT_HINT(found_docs.at(0).relevance >= found_docs.at(1).relevance, "Result of search must be sort from max relevance to min"s)
    }
    
}

// Тест вычисляет правильность вычисления рейтинга. 
// Вычисление рейтинга документов. Рейтинг добавленного документа равен среднему арифметическому оценок документа.

void TestRatingCalculation(){
    const int doc_id = 55;
    const string content = "found big black dog"s;
    const vector <int> ratings = {2, 2, 4, 4};
    const vector <int> ratings1 = {4, 4, 4, 4};
    int doc_rating = 3;
    
    
    {
      SearchServer server;
      int doc_rating = 3;
      server.AddDocument(doc_id, content, DocumentStatus::ACTUAL, ratings);
      const auto found_docs = server.FindTopDocuments("dog"s);
      ASSERT(doc_rating==found_docs.at(0).rating);
    }
    
    
    {
      SearchServer server;
      int doc_rating1 = 4;
      server.AddDocument(doc_id, content, DocumentStatus::ACTUAL, ratings1);
      const auto found_docs = server.FindTopDocuments("dog"s, DocumentStatus::ACTUAL);
      ASSERT(doc_rating1==found_docs.at(0).rating, "Wrong in rating result doc_id = 55"s);
    }
    
}

// Тест вычисляет корректность фильтрации результатов поиска с использованием предиката - ПРЕДИКАТ МАЗАФАКА

/*void TestCorrectnessPredicate(){
    
    const int doc_id = 56;
    const string content = "found big black dog"s;
    const vector <int> ratings = {2, 2, 4, 4};
    const vector <int> ratings1 = {4, 4, 4, 4};
    predicat = [document_id,documents_.at(document_id).status, ](documents_.at(document_id).rating){ 
        if(documents_.at(document_id).rating>0) return true;
        else return false
        }
    
    {
       SearchServer server; 
       server.AddDocument(doc_id, content, DocumentStatus::ACTUAL, ratings);
        const auto found_docs = server.FindTopDocuments("dog"s, predicat);
    } 
    
    
    [document_id,documents_.at(document_id).status, ](documents_.at(document_id).rating){ 
        if(documents_.at(document_id).rating>0) return true;
        else return false
        }
    
    
    if (predicat(document_id,documents_.at(document_id).status, documents_.at(document_id).rating)) {
                    document_to_relevance[document_id] += term_freq * inverse_document_freq;}
        
        template <typename Predicat>
    vector<Document> FindAllDocuments(const Query& query, Predicat predicat)

}*/


// Тест проверяет корректность работы поиска документов по статусу 
    
void TestCorrectnessSearchStatus(){
    
    const int doc_id = 57;
    const string content = "found little pink pig"s;
    const vector <int> ratings = {2, 2, 4, 4};
    {
        SearchServer server;
        server.AddDocument(doc_id, content, DocumentStatus::ACTUAL, ratings);
        const auto found_docs = server.FindTopDocuments("pig"s, DocumentStatus::ACTUAL);
        ASSERT_HINT(found_docs.size()==1);
    }
   
    {
      SearchServer server;
      int doc_rating1 = 4;
      server.AddDocument(doc_id, content, DocumentStatus::BANNED, ratings);
      const auto found_docs = server.FindTopDocuments("pig"s, DocumentStatus::ACTUAL);
      ASSERT_HINT(found_docs.size()==0, "Don't correctness search DocumentStatus"s);
    }
    
}


//Тест вычисляет корректность нахождения релевантности документа

void TestCorrectnessRelevanceDocument(){
    
    const int doc_id = 58;
    const string content = "found little pink pig"s;
    const vector <int> ratings = {2, 2, 4, 4};
    const double tf_idf = lg(1)*(1/4);
    
    {
        SearchServer server;
        server.AddDocument(doc_id, content, DocumentStatus::BANNED, ratings);
        const auto found_docs = server.FindTopDocuments("pig"s);
        ASSERT(static_cast<int>tf_idf== static_cast<int>(found_docs.relevance));
    }
    
}





// Функция TestSearchServer является точкой входа для запуска тестов
void TestSearchServer() {
    RUN_TEST(TestExcludeStopWordsFromAddedDocumentContent);
    // Не забудьте вызывать остальные тесты здесь
    RUN_TEST(TestAddingDocumentUseAddDocument);
    RUN_TEST(TestExcludeMinusWordsFromResultSearch);
    RUN_TEST(TestOnReturnPlusWordsSearchResults);
    RUN_TEST(TestSortRelevanceFromMaxToMin);
    RUN_TEST(TestRatingCalculation);
   // RUN_TEST(TestCorrectnessPredicate);
    RUN_TEST(TestCorrectnessSearchStatus);
    RUN_TEST(TestCorrectnessRelevanceDocument);
    
}

// --------- Окончание модульных тестов поисковой системы -----------

int main() {
    TestSearchServer();
    // Если вы видите эту строку, значит все тесты прошли успешно
    cout << "Search server testing finished"s << endl;
}
